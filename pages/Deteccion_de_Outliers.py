# ------------------------------------------------------------------------------------
# pages/5_üïµÔ∏è_Detecci√≥n_de_Outliers.py
# ------------------------------------------------------------------------------------

import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.ensemble import IsolationForest
import numpy as np

# Reutilizamos la funci√≥n de carga de datos desde la p√°gina principal
from Pagina_Principal import load_and_preprocess_data

st.set_page_config(
    page_title="Detecci√≥n de Outliers",
    page_icon="üïµÔ∏è",
    layout="wide"
)

st.title("üïµÔ∏è Detecci√≥n de Valores At√≠picos (Outliers)")
st.markdown("""
    Esta p√°gina utiliza el algoritmo **Isolation Forest** para identificar viviendas
    que, por sus caracter√≠sticas, se desv√≠an significativamente del resto del conjunto de datos.
    Estas son candidatas a ser **valores at√≠picos**.
""")

# Cargar los datos
original_df, _ = load_and_preprocess_data('house-price-parquet.csv')

if original_df is not None:
    # Seleccionar caracter√≠sticas para el modelo. Excluimos las binarias y categ√≥ricas.
    features = ['price', 'area', 'bedrooms', 'bathrooms', 'stories', 'parking']
    data_for_model = original_df[features]

    # Configuraci√≥n de Isolation Forest
    # El 'contamination' es el porcentaje estimado de outliers en los datos.
    model = IsolationForest(contamination=0.05, random_state=42)

    # Entrenar el modelo
    model.fit(data_for_model)

    # Predecir los outliers. -1 significa outlier, 1 significa dato normal.
    outlier_labels = model.predict(data_for_model)
    # Obtener la puntuaci√≥n de anomal√≠a. Valores m√°s bajos (m√°s negativos) indican mayor probabilidad de ser un outlier.
    anomaly_scores = model.decision_function(data_for_model)

    # Corregir el error: Transformamos las puntuaciones negativas a valores positivos para el tama√±o de los puntos
    # Invertimos el signo y sumamos el valor m√°ximo para que las puntuaciones m√°s negativas
    # se conviertan en los valores positivos m√°s grandes.
    max_score = anomaly_scores.max()
    transformed_scores = max_score - anomaly_scores

    # A√±adir los resultados al DataFrame original
    original_df['is_outlier'] = [1 if label == -1 else 0 for label in outlier_labels]
    original_df['anomaly_score'] = transformed_scores

    # Mostrar la visualizaci√≥n
    st.header("Visualizaci√≥n de Valores At√≠picos")
    st.markdown("""
        El gr√°fico de dispersi√≥n muestra las viviendas. Las que se han identificado como
        **at√≠picas** est√°n marcadas en rojo. El tama√±o del punto refleja su `anomaly_score`:
        los puntos m√°s grandes son los que el modelo considera m√°s at√≠picos.
    """)

    # Gr√°fico interactivo con Plotly para visualizar los outliers
    fig = px.scatter(
        original_df,
        x='area',
        y='price',
        color='is_outlier',
        color_discrete_map={0: 'blue', 1: 'red'},
        size='anomaly_score',
        size_max=15,
        title="Detecci√≥n de Outliers (√Årea vs Precio)",
        labels={'is_outlier': 'Es Outlier', 'area': '√Årea', 'price': 'Precio'},
        hover_data=['bedrooms', 'bathrooms', 'stories']
    )
    st.plotly_chart(fig, use_container_width=True)

    # Mostrar la tabla con los outliers
    st.header("Datos de las Viviendas At√≠picas")
    st.markdown("Aqu√≠ puedes ver los detalles de las viviendas identificadas como at√≠picas:")
    outliers_df = original_df[original_df['is_outlier'] == 1].sort_values(by='anomaly_score', ascending=False)
    st.dataframe(outliers_df)

    st.info("""
        **Nota:** Los valores at√≠picos no son necesariamente "errores" en los datos. Podr√≠an
        ser viviendas √∫nicas o de lujo con caracter√≠sticas que las distinguen del resto.
    """)
